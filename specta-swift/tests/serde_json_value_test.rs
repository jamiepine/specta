use specta::{Type, TypeCollection};
use specta_swift::Swift;

#[derive(Type)]
pub struct ContentIdentity {
    pub id: String,
    pub name: String,
    pub extra: serde_json::Value, // This is the problematic field
}

#[test]
fn test_serde_json_value_generation() {
    let swift = Swift::new()
        .header("// Generated by Specta Swift - DO NOT EDIT")
        .naming(specta_swift::NamingConvention::PascalCase)
        .optionals(specta_swift::OptionalStyle::QuestionMark);

    let types = TypeCollection::default().register::<ContentIdentity>();

    let result = swift
        .export(&types)
        .expect("Failed to generate Swift types");

    // The generated code should contain proper struct definition
    assert!(result.contains("public struct ContentIdentity: Codable"));

    // The extra field should reference JsonValue correctly (not inline its variants)
    // It could be either JSONValue (helper) or JsonValue (generated enum)
    let has_jsonvalue_helper = result.contains("public let extra: JSONValue");
    let has_jsonvalue_enum = result.contains("public let extra: JsonValue");
    assert!(
        has_jsonvalue_helper || has_jsonvalue_enum,
        "Expected either 'JSONValue' (helper) or 'JsonValue' (enum) but found neither"
    );

    // Should NOT contain malformed syntax like "case number(    case f64(Double)"
    assert!(!result.contains("case number(    case"));
    assert!(!result.contains("case number(case"));

    // The number case should be properly formed
    assert!(
        result.contains("case number(Double)")
            || result.contains("case number(JsonNumber)")
            || result.contains("case number(JSONValue)"),
        "The number case should reference a proper type, not inline variants"
    );
}
