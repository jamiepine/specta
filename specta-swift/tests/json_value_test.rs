use specta::{Type, TypeCollection};
use specta_swift::Swift;

#[derive(Type)]
#[specta(rename = "JsonNumber", untagged)]
pub enum JsonNumber {
    F64(f64),
    I64(i64),
    U64(u64),
}

#[derive(Type)]
#[specta(rename = "JsonValue", untagged)]
pub enum JsonValue {
    Null,
    Bool(bool),
    Number(JsonNumber),
    String(String),
    Array(Vec<JsonValue>),
    Object(std::collections::HashMap<String, JsonValue>),
}

#[test]
fn test_json_value_generation() {
    let swift = Swift::new()
        .header("// Generated by Specta Swift - DO NOT EDIT")
        .naming(specta_swift::NamingConvention::PascalCase)
        .optionals(specta_swift::OptionalStyle::QuestionMark);

    let types = TypeCollection::default()
        .register::<JsonNumber>()
        .register::<JsonValue>();

    let result = swift
        .export(&types)
        .expect("Failed to generate Swift types");

    // The generated code should contain proper enum definitions
    assert!(result.contains("public enum JsonNumber"));
    assert!(result.contains("public enum JsonValue"));

    // JsonNumber should have proper variants
    assert!(result.contains("case f64(Double)"));
    assert!(result.contains("case i64(Int64)"));
    assert!(result.contains("case u64(UInt64)"));

    // JsonValue should have proper variants
    assert!(result.contains("case null"));
    assert!(result.contains("case bool(Bool)"));
    assert!(result.contains("case number(JsonNumber)")); // Should reference JsonNumber, not inline it
    assert!(result.contains("case string(String)"));
    assert!(result.contains("case array([JsonValue])"));
    assert!(result.contains("case object([String: JsonValue])"));

    // Should NOT contain malformed syntax like "case number(    case f64(Double)"
    assert!(!result.contains("case number(    case"));

    // The JsonNumber enum SHOULD contain these variants, but they should NOT be inlined into JsonValue
    // So we check that they exist in JsonNumber but not directly in JsonValue
    assert!(result.contains("public enum JsonNumber"));
    assert!(result.contains("case f64(Double)"));
    assert!(result.contains("case i64(Int64)"));
    assert!(result.contains("case u64(UInt64)"));

    // But JsonValue should reference JsonNumber, not inline its variants
    assert!(result.contains("case number(JsonNumber)"));
}
